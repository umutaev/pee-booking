import logging
from os import environ

from aiogram import Bot, Dispatcher
import aiogram
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage


from bot_backend import UserBackend

# Logging
logging.basicConfig(filename="bot.log", filemode="a", encoding="utf-8")

# Config
API_TOKEN = environ["PEE_BOOKING_BOT_TOKEN"]
SERVER = "http://0.0.0.0:8080"
FLOORS = ["1", "2", "3", "4"]

# Bot
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class reg(StatesGroup):
    gender = aiogram.dispatcher.filters.state.State()
    floor = aiogram.dispatcher.filters.state.State()


@dp.message_handler(commands=["start"])
async def handle_start(message: aiogram.types.Message):
    UserExists = backend.check_user(username=message.chat.username)
    if not UserExists:
        keyboard_markup = aiogram.types.ReplyKeyboardMarkup(
            row_width=1, one_time_keyboard=True
        )
        keyboard_markup.row(aiogram.types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"))
        await message.reply(
            f"–ù—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤—ã –¥–∞—ë—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É "
            "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ 152-–§–ó –æ—Ç 27.07.2006. –ò –¥–∞, –µ—Å–ª–∏ –≤–∞–º –Ω–µ—Ç 14, —Ç–æ –¥–∞–≤–∞—Ç—å —ç—Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ "
            "–≤—ã —Ç–∏–ø–∞ –Ω–µ –º–æ–∂–µ—Ç–µ, —Ç–∞–∫ —á—Ç–æ –ø–∏–ø–∏ —Ç–æ–∂–µ —Å–¥–µ–ª–∞—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è. ¬Ø‚Äã\_(„ÉÑ)_/¬Ø",
            reply_markup=keyboard_markup,
        )
        return
    keyboard_markup = aiogram.types.ReplyKeyboardMarkup(
        row_width=1, one_time_keyboard=True
    )
    keyboard_markup.row(aiogram.types.KeyboardButton("–•–æ—á—É —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!üôà"))
    await message.reply(
        f"–í–µ—á–µ—Ä –≤ —Ö–∞—Ç—É, @{message.chat.username}.\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ–Ω–ª–∞–π–Ω "
        "–≤—Å—Ç–∞—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –≤ –¥—É—à, —á—Ç–æ–±—ã –≤—Å–µ —É—Å–ø–µ–ª–∏ –ø–æ–π—Ç–∏ –ø–æ–¥ —Å—Ç—Ä—É—é –º—ã—Ç—å—Å—è, –≤–∞—à–∏ "
        "—Å–æ—Å–µ–¥–∏ –Ω–µ –æ—Ä–∞–ª–∏ –∫–∞–∫ –ë—Ä–∞—Ç–∏—à–∫–∞, –∞ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–∞—Å—å –≤ –≥–∞—É–ø–≤–∞—Ö—Ç—É.\n"
        "–ê —Ç–æ –ê—Ä—Å–µ–Ω–∏–π –í–æ—Ä–æ–Ω–∏–Ω –∫—É—Ä–ª—ã–∫–∞—Ç—å –Ω–∞—á–Ω—ë—Ç‚Ä¶\n–ù–∞–±–µ—Ä–∏—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
        "—Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
        reply_markup=keyboard_markup,
    )


@dp.message_handler(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", state="*")
async def service_sign_up(message: aiogram.types.Message):
    keyboard_markup = aiogram.types.ReplyKeyboardMarkup(
        row_width=1, one_time_keyboard=True
    )
    keyboard_markup.row(aiogram.types.KeyboardButton("–ú"))
    keyboard_markup.row(aiogram.types.KeyboardButton("–ñ"))
    await message.reply(
        f"–ü–æ–ª?",
        reply_markup=keyboard_markup,
    )
    await reg.next()


@dp.message_handler(text=["–ú", "–ñ"], state=reg.gender)
async def service_sign_up(
    message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext
):
    await state.update_data(gender=message.text)
    keyboard_markup = aiogram.types.ReplyKeyboardMarkup(
        row_width=1, one_time_keyboard=True
    )
    for floor in FLOORS:
        keyboard_markup.row(aiogram.types.KeyboardButton(floor))
    await message.reply(
        f"–≠—Ç–∞–∂?",
        reply_markup=keyboard_markup,
    )
    await reg.next()


@dp.message_handler(text=FLOORS, state=reg.floor)
async def service_sign_up(
    message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext
):
    await state.update_data(floor=message.text)
    async with state.proxy() as data:
        if backend.create_user(
            username=message.chat.username, user_id=message.from_user.id, sex=data["gender"], floor=data["floor"]
        ):
            await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. /help")
        else:
            await message.reply(
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°—Ä–æ—á–Ω–æ –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∞–º (–∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞)!"
            )
    await state.finish()


@dp.message_handler(commands=["help"])
@dp.message_handler(text=["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!üôà", "–•–æ—á—É —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!üôà"])
async def handle_help(message: aiogram.types.Message):
    keyboard_markup = aiogram.types.ReplyKeyboardMarkup(
        row_width=1, one_time_keyboard=True
    )
    buttons = (
        "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –¥—É—à üöø",
        "–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ü§¢",
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚åö",
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥!üôà",
    )
    keyboard_markup.add(*(aiogram.types.KeyboardButton(text) for text in buttons))
    await message.reply(
        f"–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ø–æ–∫–∞–∑ —ç—Ç–æ–π –ø–æ–º–æ—â–∏\n"
        "/sign - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å <s>–Ω–∞ –ø—Ä–∏—ë–º –∫ –ê—Ä—Å–µ–Ω–∏—é –í–æ—Ä–æ–Ω–∏–Ω—É</s> –ø–æ–º—ã—Ç—å—Å—è\n"
        "/delete - –≤—ã–ø–∏—Å–∞—Ç—å—Å—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–¥ —Å—Ç—Ä—É—é (—Ç–æ–ª—å–∫–æ —ç—Ç–æ, —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–º–æ–π—Å—è, –æ–∫–µ–π?)\n"
        "/timetable - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—É—à–∞",
        reply_markup=keyboard_markup,
        parse_mode=aiogram.types.ParseMode.HTML,
    )


@dp.message_handler(commands=["/timetable"])
@dp.message_handler(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ‚åö")
async def shower_timetable(message: aiogram.types.Message):
    ...
    # TODO: shower timetable


@dp.message_handler(commands=["/sign"])
@dp.message_handler(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –¥—É—à üöø")
async def make_an_appointement(message: aiogram.types.Message):
    ...
    # TODO: shower sign up


@dp.message_handler(commands=["/delete"])
@dp.message_handler(text="–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ü§¢")
async def delete_an_appointement(message: aiogram.types.Message):
    ...
    # TODO: shower unsign up


@dp.message_handler()
async def other(message: aiogram.types.Message):
    await message.reply("–ù–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –•–æ—á–µ—à—å –≤ –¥—É—à? –ü–∏—à–∏ /help")


if __name__ == "__main__":
    backend = UserBackend(SERVER)
    aiogram.utils.executor.start_polling(dp)
